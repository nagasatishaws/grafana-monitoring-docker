version: "3"

networks:
  loki:

services:
  loki:
    image: grafana/loki:latest
    container_name: loki-container
    restart: always
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - loki

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    volumes:
      - ./dashboard.json:/var/lib/grafana/dashboards/docker-dashboard.json
    environment:
      - "GF_AUTH_DISABLE_LOGIN_FORM=false"
      - "GF_AUTH_ANONYMOUS_ENABLED=false"
      - "GF_AUTH_ANONYMOUS_ORG_ROLE=Admin"
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
          - name: Loki
            type: loki
            access: proxy
            url: http://loki:3100
          - name: prometheus
            type: prometheus
            access: proxy
            url: http://prometheus:9090           

        EOF
        /run.sh
    ports:
      - "3000:3000"
    depends_on:
      - loki
    networks:
      - loki

  promtail:
    image: grafana/promtail:2.8.0
    container_name: promtail
    restart: always
    volumes:
      - ./promtail-local-config.yaml:/etc/promtail/config.yaml:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yaml
    networks:
      - loki

  flog:
    image: mingrammer/flog
    restart: always
    command: -f json -d 1s -l
    networks:
      - loki
      
  otelcol:
    image: otel/opentelemetry-collector-contrib:0.76.1
    container_name: open-telemetry
    deploy:
      resources:
        limits:
          memory: 125M
    restart: unless-stopped
    command: [ "--config=/etc/otelcol-config.yaml" ]
    volumes:
      - ./otel-config.yaml:/etc/otelcol-config.yaml
    ports:
      - "3500:3500" # loki receiver HTTP
    networks:
      - loki

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: always
    volumes:
      - "./prometheus.yml:/etc/prometheus/prometheus.yml"
      - "./dead-mans-snitch-rule.yml:/etc/prometheus/dead-mans-snitch-rule.yml"
      - "./linuxmetrics-alerts.yml:/etc/prometheus/linuxmetrics-alerts.yml"
    networks:
      - loki
    ports:
      - 9090:9090
    depends_on:
      - cadvisor   

  pushgateway:
    image: prom/pushgateway
    container_name: pushgateway
    restart: unless-stopped
    expose:
      - 9091
    ports:
      - "9091:9091"
    networks:
      - loki
    labels:
      org.label-schema.group: "monitoring"

  node-exporter:
    image: prom/node-exporter
    networks:
      - loki
    ports:
      - 9100:9100 
  alert-manager:
    image: prom/alertmanager
    container_name: alert-manager
    restart: always
    volumes:
      - "./alertmanager.yml:/etc/alertmanager/alertmanager.yml"
    networks:
      - loki
    ports:
      - 9093:9093

  cadvisor:
    container_name: cadvisor
    image: gcr.io/cadvisor/cadvisor:latest
    restart: always
    ports:
      - "8080:8080"
    volumes: 
      - "/:/rootfs"
      - "/var/run:/var/run"
      - "/sys:/sys"
      - "/var/lib/docker/:/var/lib/docker"
      - "/dev/disk/:/dev/disk"
    networks:
      - loki    
  nginx:
    image: nginx:latest
    restart: always
    container_name: grafana-proxy
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./certs:/etc/nginx/certs
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - grafana
    networks:
      - loki 
